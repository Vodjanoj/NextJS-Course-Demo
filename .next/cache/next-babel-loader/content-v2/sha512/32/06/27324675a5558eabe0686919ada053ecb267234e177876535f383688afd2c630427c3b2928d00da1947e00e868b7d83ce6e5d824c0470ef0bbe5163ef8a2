{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Vova\\\\Documents\\\\udemy_react\\\\23-An-Introduction-To-Next.js-328\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = () => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n    title: \"A First Meetup\",\n    address: \"Some Street 5, Some City\",\n    description: \"The meetup description\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  return {\n    // This key (fallback) tells NextJS whether your paths array contains all supported parameter values\n    // or just some of them. If you set fall back to false, you say that your paths contains all supported meetup ID values.\n    // That means that if the user enters anything that's not supported here, for example, M3\n    paths: [{\n      params: {\n        meetupId: \"m1\"\n      }\n    }, {\n      params: {\n        meetupId: \"m2\"\n      }\n    }]\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  // when we accept it on getStaticProps, context will not hold request and response, but it will, for example, have a params key.\n  // and that will be an object where our identifiers between the square brackets ([meetupId]) will be properties and the values will be the actual values\n  // encoded in the URL. And that would then be the concrete meetup ID for which we're displaying this meetup.\n  const meetupId = context.params.meetupId;\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: {\n        image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n        id: meetupId,\n        title: \"First Meetup\",\n        address: \"Some Street 5, Some City\",\n        description: \"The meetup description\"\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/Vova/Documents/udemy_react/23-An-Introduction-To-Next.js-328/pages/[meetupId]/index.js"],"names":["MeetupDetail","MeetupDetails","getStaticPaths","paths","params","meetupId","getStaticProps","context","console","log","props","meetupData","image","id","title","address","description"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAC,wHADR;AAEE,IAAA,KAAK,EAAC,gBAFR;AAGE,IAAA,OAAO,EAAC,0BAHV;AAIE,IAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;AAWA,OAAO,eAAeC,cAAf,GAAgC;AACrC,SAAO;AACL;AACA;AACA;AACAC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ;AADV,KADK,EAML;AACED,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ;AADV,KANK;AAJF,GAAP;AAiBD;AAGD,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA;AACA;AACA;AACA,QAAMF,QAAQ,GAAGE,OAAO,CAACH,MAAR,CAAeC,QAAhC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACA,SAAO;AACLK,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EACH,wHAFQ;AAGVC,QAAAA,EAAE,EAAER,QAHM;AAIVS,QAAAA,KAAK,EAAE,cAJG;AAKVC,QAAAA,OAAO,EAAE,0BALC;AAMVC,QAAAA,WAAW,EAAE;AANH;AADP;AADF,GAAP;AAYD;AAED,eAAef,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\n\r\nconst MeetupDetails = () => {\r\n  return (\r\n    <MeetupDetail\r\n      image=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\"\r\n      title=\"A First Meetup\"\r\n      address=\"Some Street 5, Some City\"\r\n      description=\"The meetup description\"\r\n    />\r\n  );\r\n};\r\n\r\nexport async function getStaticPaths() {\r\n  return {\r\n    // This key (fallback) tells NextJS whether your paths array contains all supported parameter values\r\n    // or just some of them. If you set fall back to false, you say that your paths contains all supported meetup ID values.\r\n    // That means that if the user enters anything that's not supported here, for example, M3\r\n    paths: [\r\n      {\r\n        params: {\r\n          meetupId: \"m1\",\r\n        },\r\n      },\r\n      {\r\n        params: {\r\n          meetupId: \"m2\",\r\n        },\r\n      },\r\n    ],\r\n  };\r\n}\r\n\r\n\r\nexport async function getStaticProps(context) {\r\n  // fetch data for a single meetup\r\n  // when we accept it on getStaticProps, context will not hold request and response, but it will, for example, have a params key.\r\n  // and that will be an object where our identifiers between the square brackets ([meetupId]) will be properties and the values will be the actual values\r\n  // encoded in the URL. And that would then be the concrete meetup ID for which we're displaying this meetup.\r\n  const meetupId = context.params.meetupId;\r\n  console.log(meetupId);\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        image:\r\n          \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\r\n        id: meetupId,\r\n        title: \"First Meetup\",\r\n        address: \"Some Street 5, Some City\",\r\n        description: \"The meetup description\",\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}